// This file was GENERATED by command:
//     pump.py guicpp_provider_helpers.h.pump
// DO NOT EDIT BY HAND!!!

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// This file contains specialized definitions of ProviderGet class.

#ifndef GUICPP_PROVIDER_HELPERS_H_
#define GUICPP_PROVIDER_HELPERS_H_

#include "guicpp/internal/guicpp_port.h"
#include "guicpp/internal/guicpp_inject_util.h"
#include "guicpp/internal/guicpp_provider_types.h"
#include "guicpp/internal/guicpp_util.h"

namespace guicpp {
namespace internal {
class LocalContext;

template <typename R>
class ProviderGet<R()>: public ProviderBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)();

  virtual ~ProviderGet() {}
  virtual R Get() = 0;

 protected:
  ProviderGet() {}

 private:
  static R GetInvoker(
      const Injector* injector,
      const LocalContext* local_context,
      ProviderGet* provider) {
    return provider->Get();
  }

  template <typename T>
  friend class AbstractProvider;

  GUICPP_DISALLOW_COPY_AND_ASSIGN_(ProviderGet);
};

template <typename R, typename A1>
class ProviderGet<R(A1)>: public ProviderBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1);

  virtual ~ProviderGet() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1) = 0;

 protected:
  ProviderGet() {}

 private:
  static R GetInvoker(
      const Injector* injector,
      const LocalContext* local_context,
      ProviderGet* provider) {
    InjectorUtil inject_util(injector);
    return provider->Get(
      inject_util.GetWithContext<A1>(local_context));
  }

  template <typename T>
  friend class AbstractProvider;

  GUICPP_DISALLOW_COPY_AND_ASSIGN_(ProviderGet);
};

template <typename R, typename A1, typename A2>
class ProviderGet<R(A1, A2)>: public ProviderBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2);

  virtual ~ProviderGet() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2) = 0;

 protected:
  ProviderGet() {}

 private:
  static R GetInvoker(
      const Injector* injector,
      const LocalContext* local_context,
      ProviderGet* provider) {
    InjectorUtil inject_util(injector);
    return provider->Get(
      inject_util.GetWithContext<A1>(local_context),
      inject_util.GetWithContext<A2>(local_context));
  }

  template <typename T>
  friend class AbstractProvider;

  GUICPP_DISALLOW_COPY_AND_ASSIGN_(ProviderGet);
};

template <typename R, typename A1, typename A2, typename A3>
class ProviderGet<R(A1, A2, A3)>: public ProviderBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3);

  virtual ~ProviderGet() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3) = 0;

 protected:
  ProviderGet() {}

 private:
  static R GetInvoker(
      const Injector* injector,
      const LocalContext* local_context,
      ProviderGet* provider) {
    InjectorUtil inject_util(injector);
    return provider->Get(
      inject_util.GetWithContext<A1>(local_context),
      inject_util.GetWithContext<A2>(local_context),
      inject_util.GetWithContext<A3>(local_context));
  }

  template <typename T>
  friend class AbstractProvider;

  GUICPP_DISALLOW_COPY_AND_ASSIGN_(ProviderGet);
};

template <typename R, typename A1, typename A2, typename A3, typename A4>
class ProviderGet<R(A1, A2, A3, A4)>: public ProviderBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4);

  virtual ~ProviderGet() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4) = 0;

 protected:
  ProviderGet() {}

 private:
  static R GetInvoker(
      const Injector* injector,
      const LocalContext* local_context,
      ProviderGet* provider) {
    InjectorUtil inject_util(injector);
    return provider->Get(
      inject_util.GetWithContext<A1>(local_context),
      inject_util.GetWithContext<A2>(local_context),
      inject_util.GetWithContext<A3>(local_context),
      inject_util.GetWithContext<A4>(local_context));
  }

  template <typename T>
  friend class AbstractProvider;

  GUICPP_DISALLOW_COPY_AND_ASSIGN_(ProviderGet);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5>
class ProviderGet<R(A1, A2, A3, A4, A5)>: public ProviderBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5);

  virtual ~ProviderGet() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5) = 0;

 protected:
  ProviderGet() {}

 private:
  static R GetInvoker(
      const Injector* injector,
      const LocalContext* local_context,
      ProviderGet* provider) {
    InjectorUtil inject_util(injector);
    return provider->Get(
      inject_util.GetWithContext<A1>(local_context),
      inject_util.GetWithContext<A2>(local_context),
      inject_util.GetWithContext<A3>(local_context),
      inject_util.GetWithContext<A4>(local_context),
      inject_util.GetWithContext<A5>(local_context));
  }

  template <typename T>
  friend class AbstractProvider;

  GUICPP_DISALLOW_COPY_AND_ASSIGN_(ProviderGet);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6>
class ProviderGet<R(A1, A2, A3, A4, A5, A6)>: public ProviderBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6);

  virtual ~ProviderGet() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6) = 0;

 protected:
  ProviderGet() {}

 private:
  static R GetInvoker(
      const Injector* injector,
      const LocalContext* local_context,
      ProviderGet* provider) {
    InjectorUtil inject_util(injector);
    return provider->Get(
      inject_util.GetWithContext<A1>(local_context),
      inject_util.GetWithContext<A2>(local_context),
      inject_util.GetWithContext<A3>(local_context),
      inject_util.GetWithContext<A4>(local_context),
      inject_util.GetWithContext<A5>(local_context),
      inject_util.GetWithContext<A6>(local_context));
  }

  template <typename T>
  friend class AbstractProvider;

  GUICPP_DISALLOW_COPY_AND_ASSIGN_(ProviderGet);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7>
class ProviderGet<R(A1, A2, A3, A4, A5, A6, A7)>: public ProviderBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7);

  virtual ~ProviderGet() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7) = 0;

 protected:
  ProviderGet() {}

 private:
  static R GetInvoker(
      const Injector* injector,
      const LocalContext* local_context,
      ProviderGet* provider) {
    InjectorUtil inject_util(injector);
    return provider->Get(
      inject_util.GetWithContext<A1>(local_context),
      inject_util.GetWithContext<A2>(local_context),
      inject_util.GetWithContext<A3>(local_context),
      inject_util.GetWithContext<A4>(local_context),
      inject_util.GetWithContext<A5>(local_context),
      inject_util.GetWithContext<A6>(local_context),
      inject_util.GetWithContext<A7>(local_context));
  }

  template <typename T>
  friend class AbstractProvider;

  GUICPP_DISALLOW_COPY_AND_ASSIGN_(ProviderGet);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8>
class ProviderGet<R(A1, A2, A3, A4, A5, A6, A7, A8)>: public ProviderBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8);

  virtual ~ProviderGet() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8) = 0;

 protected:
  ProviderGet() {}

 private:
  static R GetInvoker(
      const Injector* injector,
      const LocalContext* local_context,
      ProviderGet* provider) {
    InjectorUtil inject_util(injector);
    return provider->Get(
      inject_util.GetWithContext<A1>(local_context),
      inject_util.GetWithContext<A2>(local_context),
      inject_util.GetWithContext<A3>(local_context),
      inject_util.GetWithContext<A4>(local_context),
      inject_util.GetWithContext<A5>(local_context),
      inject_util.GetWithContext<A6>(local_context),
      inject_util.GetWithContext<A7>(local_context),
      inject_util.GetWithContext<A8>(local_context));
  }

  template <typename T>
  friend class AbstractProvider;

  GUICPP_DISALLOW_COPY_AND_ASSIGN_(ProviderGet);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8, typename A9>
class ProviderGet<R(A1, A2, A3, A4, A5, A6, A7, A8, A9)>: public ProviderBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8,
      typename AtUtil::GetTypes<A9>::ActualType a9);

  virtual ~ProviderGet() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8,
      typename AtUtil::GetTypes<A9>::ActualType a9) = 0;

 protected:
  ProviderGet() {}

 private:
  static R GetInvoker(
      const Injector* injector,
      const LocalContext* local_context,
      ProviderGet* provider) {
    InjectorUtil inject_util(injector);
    return provider->Get(
      inject_util.GetWithContext<A1>(local_context),
      inject_util.GetWithContext<A2>(local_context),
      inject_util.GetWithContext<A3>(local_context),
      inject_util.GetWithContext<A4>(local_context),
      inject_util.GetWithContext<A5>(local_context),
      inject_util.GetWithContext<A6>(local_context),
      inject_util.GetWithContext<A7>(local_context),
      inject_util.GetWithContext<A8>(local_context),
      inject_util.GetWithContext<A9>(local_context));
  }

  template <typename T>
  friend class AbstractProvider;

  GUICPP_DISALLOW_COPY_AND_ASSIGN_(ProviderGet);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8, typename A9,
    typename A10>
class ProviderGet<R(A1, A2, A3, A4, A5, A6, A7, A8, A9,
    A10)>: public ProviderBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8,
      typename AtUtil::GetTypes<A9>::ActualType a9,
      typename AtUtil::GetTypes<A10>::ActualType a10);

  virtual ~ProviderGet() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8,
      typename AtUtil::GetTypes<A9>::ActualType a9,
      typename AtUtil::GetTypes<A10>::ActualType a10) = 0;

 protected:
  ProviderGet() {}

 private:
  static R GetInvoker(
      const Injector* injector,
      const LocalContext* local_context,
      ProviderGet* provider) {
    InjectorUtil inject_util(injector);
    return provider->Get(
      inject_util.GetWithContext<A1>(local_context),
      inject_util.GetWithContext<A2>(local_context),
      inject_util.GetWithContext<A3>(local_context),
      inject_util.GetWithContext<A4>(local_context),
      inject_util.GetWithContext<A5>(local_context),
      inject_util.GetWithContext<A6>(local_context),
      inject_util.GetWithContext<A7>(local_context),
      inject_util.GetWithContext<A8>(local_context),
      inject_util.GetWithContext<A9>(local_context),
      inject_util.GetWithContext<A10>(local_context));
  }

  template <typename T>
  friend class AbstractProvider;

  GUICPP_DISALLOW_COPY_AND_ASSIGN_(ProviderGet);
};

}  // namespace internal
}  // namespace guicpp

#endif  // GUICPP_PROVIDER_HELPERS_H_
