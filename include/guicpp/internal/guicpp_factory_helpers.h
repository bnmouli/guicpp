// This file was GENERATED by command:
//     pump.py guicpp_factory_helpers.h.pump
// DO NOT EDIT BY HAND!!!

// Copyright 2014 Google Inc. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


// This file contains specialized definitions of FactoryInterface class
// and its implementation (RealFactory).

#ifndef GUICPP_FACTORY_HELPERS_H_
#define GUICPP_FACTORY_HELPERS_H_

#include "guicpp/internal/guicpp_port.h"
#include "guicpp/internal/guicpp_factory_types.h"
#include "guicpp/internal/guicpp_inject_util.h"
#include "guicpp/internal/guicpp_local_context.h"
#include "guicpp/internal/guicpp_util.h"

namespace guicpp {
namespace internal {

template <typename R>
class FactoryInterface<R()>: public FactoryBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)();

  virtual ~FactoryInterface() {}
  virtual R Get() const = 0;

 protected:
  FactoryInterface() {}

 private:
  GUICPP_DISALLOW_COPY_AND_ASSIGN_(FactoryInterface);
};

template <typename R, typename A1>
class FactoryInterface<R(A1)>: public FactoryBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1);

  virtual ~FactoryInterface() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1) const = 0;

 protected:
  FactoryInterface() {}

 private:
  GUICPP_DISALLOW_COPY_AND_ASSIGN_(FactoryInterface);
};

template <typename R, typename A1, typename A2>
class FactoryInterface<R(A1, A2)>: public FactoryBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2);

  virtual ~FactoryInterface() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2) const = 0;

 protected:
  FactoryInterface() {}

 private:
  GUICPP_DISALLOW_COPY_AND_ASSIGN_(FactoryInterface);
};

template <typename R, typename A1, typename A2, typename A3>
class FactoryInterface<R(A1, A2, A3)>: public FactoryBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3);

  virtual ~FactoryInterface() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3) const = 0;

 protected:
  FactoryInterface() {}

 private:
  GUICPP_DISALLOW_COPY_AND_ASSIGN_(FactoryInterface);
};

template <typename R, typename A1, typename A2, typename A3, typename A4>
class FactoryInterface<R(A1, A2, A3, A4)>: public FactoryBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4);

  virtual ~FactoryInterface() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4) const = 0;

 protected:
  FactoryInterface() {}

 private:
  GUICPP_DISALLOW_COPY_AND_ASSIGN_(FactoryInterface);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5>
class FactoryInterface<R(A1, A2, A3, A4, A5)>: public FactoryBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5);

  virtual ~FactoryInterface() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5) const = 0;

 protected:
  FactoryInterface() {}

 private:
  GUICPP_DISALLOW_COPY_AND_ASSIGN_(FactoryInterface);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6>
class FactoryInterface<R(A1, A2, A3, A4, A5, A6)>: public FactoryBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6);

  virtual ~FactoryInterface() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6) const = 0;

 protected:
  FactoryInterface() {}

 private:
  GUICPP_DISALLOW_COPY_AND_ASSIGN_(FactoryInterface);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7>
class FactoryInterface<R(A1, A2, A3, A4, A5, A6, A7)>: public FactoryBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7);

  virtual ~FactoryInterface() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7) const = 0;

 protected:
  FactoryInterface() {}

 private:
  GUICPP_DISALLOW_COPY_AND_ASSIGN_(FactoryInterface);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8>
class FactoryInterface<R(A1, A2, A3, A4, A5, A6, A7, A8)>: public FactoryBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8);

  virtual ~FactoryInterface() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8) const = 0;

 protected:
  FactoryInterface() {}

 private:
  GUICPP_DISALLOW_COPY_AND_ASSIGN_(FactoryInterface);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8, typename A9>
class FactoryInterface<R(A1, A2, A3, A4, A5, A6, A7, A8,
    A9)>: public FactoryBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8,
      typename AtUtil::GetTypes<A9>::ActualType a9);

  virtual ~FactoryInterface() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8,
      typename AtUtil::GetTypes<A9>::ActualType a9) const = 0;

 protected:
  FactoryInterface() {}

 private:
  GUICPP_DISALLOW_COPY_AND_ASSIGN_(FactoryInterface);
};

template <typename R, typename A1, typename A2, typename A3, typename A4,
    typename A5, typename A6, typename A7, typename A8, typename A9,
    typename A10>
class FactoryInterface<R(A1, A2, A3, A4, A5, A6, A7, A8, A9,
    A10)>: public FactoryBase {
 public:
  typedef R ReturnType;
  typedef R (Signature)(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8,
      typename AtUtil::GetTypes<A9>::ActualType a9,
      typename AtUtil::GetTypes<A10>::ActualType a10);

  virtual ~FactoryInterface() {}
  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8,
      typename AtUtil::GetTypes<A9>::ActualType a9,
      typename AtUtil::GetTypes<A10>::ActualType a10) const = 0;

 protected:
  FactoryInterface() {}

 private:
  GUICPP_DISALLOW_COPY_AND_ASSIGN_(FactoryInterface);
};

// R : return type of the function.
template <typename Annotations, typename FactoryType, typename R>
class RealFactory<Annotations, FactoryType, R()>: public FactoryType {
 public:
  explicit RealFactory(const Injector* injector): injector_(injector) {}
  virtual ~RealFactory() {}

  virtual R Get() const {
    const TypeIdArgumentPair* argument_list = NULL;

    LocalContext local_context(argument_list, 0);
    InjectorUtil inject_util(injector_);
    return inject_util.GetActualType<Annotations, R>(&local_context);
  }

 private:
  const Injector* injector_;
};

template <typename Annotations, typename FactoryType, typename R, typename A1>
class RealFactory<Annotations, FactoryType, R(A1)>: public FactoryType {
 public:
  explicit RealFactory(const Injector* injector): injector_(injector) {}
  virtual ~RealFactory() {}

  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1) const {
    FactoryArgumentEntry<typename AtUtil::GetTypes<A1>::ActualType> entry1(a1);

    const TypeIdArgumentPair argument_list[1] = {
      { InjectorUtil::GetFactoryArgsBindId<A1>(), &entry1 },
    };

    LocalContext local_context(argument_list, 1);
    InjectorUtil inject_util(injector_);
    return inject_util.GetActualType<Annotations, R>(&local_context);
  }

 private:
  const Injector* injector_;
};

template <typename Annotations, typename FactoryType, typename R, typename A1,
    typename A2>
class RealFactory<Annotations, FactoryType, R(A1, A2)>: public FactoryType {
 public:
  explicit RealFactory(const Injector* injector): injector_(injector) {}
  virtual ~RealFactory() {}

  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2) const {
    FactoryArgumentEntry<typename AtUtil::GetTypes<A1>::ActualType> entry1(a1);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A2>::ActualType> entry2(a2);

    const TypeIdArgumentPair argument_list[2] = {
      { InjectorUtil::GetFactoryArgsBindId<A1>(), &entry1 },
      { InjectorUtil::GetFactoryArgsBindId<A2>(), &entry2 },
    };

    LocalContext local_context(argument_list, 2);
    InjectorUtil inject_util(injector_);
    return inject_util.GetActualType<Annotations, R>(&local_context);
  }

 private:
  const Injector* injector_;
};

template <typename Annotations, typename FactoryType, typename R, typename A1,
    typename A2, typename A3>
class RealFactory<Annotations, FactoryType, R(A1, A2, A3)>: public FactoryType {
 public:
  explicit RealFactory(const Injector* injector): injector_(injector) {}
  virtual ~RealFactory() {}

  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3) const {
    FactoryArgumentEntry<typename AtUtil::GetTypes<A1>::ActualType> entry1(a1);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A2>::ActualType> entry2(a2);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A3>::ActualType> entry3(a3);

    const TypeIdArgumentPair argument_list[3] = {
      { InjectorUtil::GetFactoryArgsBindId<A1>(), &entry1 },
      { InjectorUtil::GetFactoryArgsBindId<A2>(), &entry2 },
      { InjectorUtil::GetFactoryArgsBindId<A3>(), &entry3 },
    };

    LocalContext local_context(argument_list, 3);
    InjectorUtil inject_util(injector_);
    return inject_util.GetActualType<Annotations, R>(&local_context);
  }

 private:
  const Injector* injector_;
};

template <typename Annotations, typename FactoryType, typename R, typename A1,
    typename A2, typename A3, typename A4>
class RealFactory<Annotations, FactoryType, R(A1, A2, A3,
    A4)>: public FactoryType {
 public:
  explicit RealFactory(const Injector* injector): injector_(injector) {}
  virtual ~RealFactory() {}

  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4) const {
    FactoryArgumentEntry<typename AtUtil::GetTypes<A1>::ActualType> entry1(a1);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A2>::ActualType> entry2(a2);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A3>::ActualType> entry3(a3);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A4>::ActualType> entry4(a4);

    const TypeIdArgumentPair argument_list[4] = {
      { InjectorUtil::GetFactoryArgsBindId<A1>(), &entry1 },
      { InjectorUtil::GetFactoryArgsBindId<A2>(), &entry2 },
      { InjectorUtil::GetFactoryArgsBindId<A3>(), &entry3 },
      { InjectorUtil::GetFactoryArgsBindId<A4>(), &entry4 },
    };

    LocalContext local_context(argument_list, 4);
    InjectorUtil inject_util(injector_);
    return inject_util.GetActualType<Annotations, R>(&local_context);
  }

 private:
  const Injector* injector_;
};

template <typename Annotations, typename FactoryType, typename R, typename A1,
    typename A2, typename A3, typename A4, typename A5>
class RealFactory<Annotations, FactoryType, R(A1, A2, A3, A4,
    A5)>: public FactoryType {
 public:
  explicit RealFactory(const Injector* injector): injector_(injector) {}
  virtual ~RealFactory() {}

  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5) const {
    FactoryArgumentEntry<typename AtUtil::GetTypes<A1>::ActualType> entry1(a1);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A2>::ActualType> entry2(a2);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A3>::ActualType> entry3(a3);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A4>::ActualType> entry4(a4);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A5>::ActualType> entry5(a5);

    const TypeIdArgumentPair argument_list[5] = {
      { InjectorUtil::GetFactoryArgsBindId<A1>(), &entry1 },
      { InjectorUtil::GetFactoryArgsBindId<A2>(), &entry2 },
      { InjectorUtil::GetFactoryArgsBindId<A3>(), &entry3 },
      { InjectorUtil::GetFactoryArgsBindId<A4>(), &entry4 },
      { InjectorUtil::GetFactoryArgsBindId<A5>(), &entry5 },
    };

    LocalContext local_context(argument_list, 5);
    InjectorUtil inject_util(injector_);
    return inject_util.GetActualType<Annotations, R>(&local_context);
  }

 private:
  const Injector* injector_;
};

template <typename Annotations, typename FactoryType, typename R, typename A1,
    typename A2, typename A3, typename A4, typename A5, typename A6>
class RealFactory<Annotations, FactoryType, R(A1, A2, A3, A4, A5,
    A6)>: public FactoryType {
 public:
  explicit RealFactory(const Injector* injector): injector_(injector) {}
  virtual ~RealFactory() {}

  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6) const {
    FactoryArgumentEntry<typename AtUtil::GetTypes<A1>::ActualType> entry1(a1);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A2>::ActualType> entry2(a2);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A3>::ActualType> entry3(a3);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A4>::ActualType> entry4(a4);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A5>::ActualType> entry5(a5);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A6>::ActualType> entry6(a6);

    const TypeIdArgumentPair argument_list[6] = {
      { InjectorUtil::GetFactoryArgsBindId<A1>(), &entry1 },
      { InjectorUtil::GetFactoryArgsBindId<A2>(), &entry2 },
      { InjectorUtil::GetFactoryArgsBindId<A3>(), &entry3 },
      { InjectorUtil::GetFactoryArgsBindId<A4>(), &entry4 },
      { InjectorUtil::GetFactoryArgsBindId<A5>(), &entry5 },
      { InjectorUtil::GetFactoryArgsBindId<A6>(), &entry6 },
    };

    LocalContext local_context(argument_list, 6);
    InjectorUtil inject_util(injector_);
    return inject_util.GetActualType<Annotations, R>(&local_context);
  }

 private:
  const Injector* injector_;
};

template <typename Annotations, typename FactoryType, typename R, typename A1,
    typename A2, typename A3, typename A4, typename A5, typename A6,
    typename A7>
class RealFactory<Annotations, FactoryType, R(A1, A2, A3, A4, A5, A6,
    A7)>: public FactoryType {
 public:
  explicit RealFactory(const Injector* injector): injector_(injector) {}
  virtual ~RealFactory() {}

  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7) const {
    FactoryArgumentEntry<typename AtUtil::GetTypes<A1>::ActualType> entry1(a1);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A2>::ActualType> entry2(a2);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A3>::ActualType> entry3(a3);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A4>::ActualType> entry4(a4);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A5>::ActualType> entry5(a5);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A6>::ActualType> entry6(a6);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A7>::ActualType> entry7(a7);

    const TypeIdArgumentPair argument_list[7] = {
      { InjectorUtil::GetFactoryArgsBindId<A1>(), &entry1 },
      { InjectorUtil::GetFactoryArgsBindId<A2>(), &entry2 },
      { InjectorUtil::GetFactoryArgsBindId<A3>(), &entry3 },
      { InjectorUtil::GetFactoryArgsBindId<A4>(), &entry4 },
      { InjectorUtil::GetFactoryArgsBindId<A5>(), &entry5 },
      { InjectorUtil::GetFactoryArgsBindId<A6>(), &entry6 },
      { InjectorUtil::GetFactoryArgsBindId<A7>(), &entry7 },
    };

    LocalContext local_context(argument_list, 7);
    InjectorUtil inject_util(injector_);
    return inject_util.GetActualType<Annotations, R>(&local_context);
  }

 private:
  const Injector* injector_;
};

template <typename Annotations, typename FactoryType, typename R, typename A1,
    typename A2, typename A3, typename A4, typename A5, typename A6,
    typename A7, typename A8>
class RealFactory<Annotations, FactoryType, R(A1, A2, A3, A4, A5, A6, A7,
    A8)>: public FactoryType {
 public:
  explicit RealFactory(const Injector* injector): injector_(injector) {}
  virtual ~RealFactory() {}

  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8) const {
    FactoryArgumentEntry<typename AtUtil::GetTypes<A1>::ActualType> entry1(a1);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A2>::ActualType> entry2(a2);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A3>::ActualType> entry3(a3);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A4>::ActualType> entry4(a4);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A5>::ActualType> entry5(a5);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A6>::ActualType> entry6(a6);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A7>::ActualType> entry7(a7);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A8>::ActualType> entry8(a8);

    const TypeIdArgumentPair argument_list[8] = {
      { InjectorUtil::GetFactoryArgsBindId<A1>(), &entry1 },
      { InjectorUtil::GetFactoryArgsBindId<A2>(), &entry2 },
      { InjectorUtil::GetFactoryArgsBindId<A3>(), &entry3 },
      { InjectorUtil::GetFactoryArgsBindId<A4>(), &entry4 },
      { InjectorUtil::GetFactoryArgsBindId<A5>(), &entry5 },
      { InjectorUtil::GetFactoryArgsBindId<A6>(), &entry6 },
      { InjectorUtil::GetFactoryArgsBindId<A7>(), &entry7 },
      { InjectorUtil::GetFactoryArgsBindId<A8>(), &entry8 },
    };

    LocalContext local_context(argument_list, 8);
    InjectorUtil inject_util(injector_);
    return inject_util.GetActualType<Annotations, R>(&local_context);
  }

 private:
  const Injector* injector_;
};

template <typename Annotations, typename FactoryType, typename R, typename A1,
    typename A2, typename A3, typename A4, typename A5, typename A6,
    typename A7, typename A8, typename A9>
class RealFactory<Annotations, FactoryType, R(A1, A2, A3, A4, A5, A6, A7, A8,
    A9)>: public FactoryType {
 public:
  explicit RealFactory(const Injector* injector): injector_(injector) {}
  virtual ~RealFactory() {}

  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8,
      typename AtUtil::GetTypes<A9>::ActualType a9) const {
    FactoryArgumentEntry<typename AtUtil::GetTypes<A1>::ActualType> entry1(a1);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A2>::ActualType> entry2(a2);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A3>::ActualType> entry3(a3);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A4>::ActualType> entry4(a4);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A5>::ActualType> entry5(a5);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A6>::ActualType> entry6(a6);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A7>::ActualType> entry7(a7);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A8>::ActualType> entry8(a8);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A9>::ActualType> entry9(a9);

    const TypeIdArgumentPair argument_list[9] = {
      { InjectorUtil::GetFactoryArgsBindId<A1>(), &entry1 },
      { InjectorUtil::GetFactoryArgsBindId<A2>(), &entry2 },
      { InjectorUtil::GetFactoryArgsBindId<A3>(), &entry3 },
      { InjectorUtil::GetFactoryArgsBindId<A4>(), &entry4 },
      { InjectorUtil::GetFactoryArgsBindId<A5>(), &entry5 },
      { InjectorUtil::GetFactoryArgsBindId<A6>(), &entry6 },
      { InjectorUtil::GetFactoryArgsBindId<A7>(), &entry7 },
      { InjectorUtil::GetFactoryArgsBindId<A8>(), &entry8 },
      { InjectorUtil::GetFactoryArgsBindId<A9>(), &entry9 },
    };

    LocalContext local_context(argument_list, 9);
    InjectorUtil inject_util(injector_);
    return inject_util.GetActualType<Annotations, R>(&local_context);
  }

 private:
  const Injector* injector_;
};

template <typename Annotations, typename FactoryType, typename R, typename A1,
    typename A2, typename A3, typename A4, typename A5, typename A6,
    typename A7, typename A8, typename A9, typename A10>
class RealFactory<Annotations, FactoryType, R(A1, A2, A3, A4, A5, A6, A7, A8,
    A9, A10)>: public FactoryType {
 public:
  explicit RealFactory(const Injector* injector): injector_(injector) {}
  virtual ~RealFactory() {}

  virtual R Get(typename AtUtil::GetTypes<A1>::ActualType a1,
      typename AtUtil::GetTypes<A2>::ActualType a2,
      typename AtUtil::GetTypes<A3>::ActualType a3,
      typename AtUtil::GetTypes<A4>::ActualType a4,
      typename AtUtil::GetTypes<A5>::ActualType a5,
      typename AtUtil::GetTypes<A6>::ActualType a6,
      typename AtUtil::GetTypes<A7>::ActualType a7,
      typename AtUtil::GetTypes<A8>::ActualType a8,
      typename AtUtil::GetTypes<A9>::ActualType a9,
      typename AtUtil::GetTypes<A10>::ActualType a10) const {
    FactoryArgumentEntry<typename AtUtil::GetTypes<A1>::ActualType> entry1(a1);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A2>::ActualType> entry2(a2);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A3>::ActualType> entry3(a3);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A4>::ActualType> entry4(a4);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A5>::ActualType> entry5(a5);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A6>::ActualType> entry6(a6);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A7>::ActualType> entry7(a7);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A8>::ActualType> entry8(a8);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A9>::ActualType> entry9(a9);
    FactoryArgumentEntry<typename AtUtil::GetTypes<A10>::ActualType>
        entry10(a10);

    const TypeIdArgumentPair argument_list[10] = {
      { InjectorUtil::GetFactoryArgsBindId<A1>(), &entry1 },
      { InjectorUtil::GetFactoryArgsBindId<A2>(), &entry2 },
      { InjectorUtil::GetFactoryArgsBindId<A3>(), &entry3 },
      { InjectorUtil::GetFactoryArgsBindId<A4>(), &entry4 },
      { InjectorUtil::GetFactoryArgsBindId<A5>(), &entry5 },
      { InjectorUtil::GetFactoryArgsBindId<A6>(), &entry6 },
      { InjectorUtil::GetFactoryArgsBindId<A7>(), &entry7 },
      { InjectorUtil::GetFactoryArgsBindId<A8>(), &entry8 },
      { InjectorUtil::GetFactoryArgsBindId<A9>(), &entry9 },
      { InjectorUtil::GetFactoryArgsBindId<A10>(), &entry10 },
    };

    LocalContext local_context(argument_list, 10);
    InjectorUtil inject_util(injector_);
    return inject_util.GetActualType<Annotations, R>(&local_context);
  }

 private:
  const Injector* injector_;
};

}  // namespace internal
}  // namespace guicpp

#endif  // GUICPP_FACTORY_HELPERS_H_
